unique GameObject FountainOfBlood
{
	Blood : int = 10;
	Name : string;
	
	abstract fn Foo() -> int; /* An abstract method must be defined in every state.*/

	
	auto state State1
	{
		when Value1IsHigh SetState Closed1;
		
		fn Foo() -> int
		{
			return Blood*2;
		}
		
		fn Activate(actor : IActor)
		{
			Name = actor.Name;
			if(Foo() > 200)
			{
				SetState State2;
			}
			else if(actor.Health > 10)
			{
				Damage actor by 10;
				Blood += 10;
			}
		}
		
	}
	
	state State2
	{
		when Value1IsHigh SetState Closed2;
		
		fn Foo() -> int
		{
			return Blood^2;
		}
		
		fn Activate(actor : IActor)
		{
			Name = actor.Name;
			if(Foo < 100)
			{
				SetState State1;
			}
			else if(actor.Health < actor.MaxHP)
			{
				let blood = Min(actor.MaxHP - actor.Health, 10);
				Heal actor by blood;
				Blood -= blood;
			}
		}
		
	}
	
	state Closed1
	{
		when Value1IsLow SetState State1;
		
		fn Foo() -> int
		{
			return 0;
		}
		
		Activate(actor : IActor)
		{
			say "This blood fountain is closed.\n\nPlease try again later."
		}
	}
	
	
	state Closed2
	{
		when Value1IsLow SetState State2;
		
		fn Foo() -> int
		{
			return 0;
		}
		
		Activate(actor : IActor)
		{
			say "This blood fountain is closed.\n\nPlease try again later."
		}
	}
}
