using "test2";


fn TryStakeVampire(vampire : IEnemy)
{
	if(vampire.GetHP() < 25)
	{
		say "You drive a wooden stake into the vampire's heart!";
		vampire.Kill();
	}
	else
	{
		say "The vampire is too strong. You have to weaken it more.";
	}
}

fn foo(a:int, b:double) -> double
{
	let c = a - b;
	if(a < b)
	{
		let mut d = a * 3;
		say "Hello";
		if(d < b)
		{
			let mut e = d + a;
			say "Hello"*e;
		}
	}
	let mut f = a /(b+1);
	f -= 2;
	return f;
}

fn bar(value: int)-> Range
{
	return -value..value;
}

fn HelloRanges(value: int)
{
	for i in bar(value)
	{
		// say i; // results in runtime error.
		say ""+i;
	}
}

fn GetNames(dogs : Vector<Dog>) -> Vector<string>
{
	let names = new List<string>();
	for dog in dogs
	{
		names.Add(dog.Name);
	}
	return names.ToVector();
}


fn FnTestA()-> int
{
	TestA.ValueChange();
	let value = TestA.GetValue();
	if(value > 100)
	{
		TestA.ChangeB();
	}
	elsif(value < -100)
	{
		TestA.ChangeA()
	}
	return 0;
}

struct Item{Name:string, Value :int}

unique ScriptClass TestA
{
	mut Value : int;
	
	fn abstract ValueChange()->();
	
	fn abstract Foo()->Option<string>;
	
	fn ChangeA()
	{
		setstate StateA;
	}
	
	fn ChangeB()
	{
		setstate StateB;
	}
	
	fn GetValue() -> int
	{
		return Value;
	}
	
	fn Talk()
	{
		if let str = Foo()
		{
			say str;
		}
	
	}
	
	auto state StateA
	{
		
		fn ValueChange()->()
		{
			Value = Value + 5;
		}
		
		fn Foo() -> Option<string>
		{
			return none;
		}
		
	}
	
	state StateB
	{
		
		
		fn ValueChange()->()
		{
			Value = Value - 3;
		}
		
		fn Foo() -> Option<string>
		{
			let mut str = some("foo");
			if(Value < 100){
				str = none;
			}
			elsif(Value % 2 == 0){
				str = "even";
			}
			else {
				str = "odd";
			}
			
			return str;
		}
	}
	
}
