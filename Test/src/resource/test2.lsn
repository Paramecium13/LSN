


struct Cat {Age:int, Name:string}

struct Dog {Age: int, Name:string}

fn Bark(dog : Dog)
{
	say dog . Name + ": Woof!";
}

fn Meow(cat : Cat)
{
	say cat . Name + ": Meow!";
}

HostInterface IActor
{
	fn HasItem(itemId : string ) -> bool;
	// Other stuff...
}


fn Sum(x:int, y:int)-> int
{
	return x + y;
}

struct Circle
{
	X : double,
	Y : double,
	Radius : double
}

HostInterface IStandardDoor
{
	event Activate(actor : IActor);
}
fn IsInCircle(circ:Circle,x:double,y:double)
{
	return (x-circ.X)^2 + (y-circ.Y)^2 <= circ.Radius;
}

fn GetArea(circ:Circle)->double
{
	say "Can't find π";
}

struct Point
{
	X : double,
	Y : double
}

fn Distance(a:Point,b:Point)-> double
{
	return Hypot(a.X-b.X,a.Y-b.Y);
}


// for( i = 0 ` a ` a)




fn ToCat(dog:Dog) -> Cat
{
	return new Cat(Age:dog.Age,Name:dog.Name);
}

fn ToDog(cat:Cat) -> Dog
{
	return new Dog(Age:cat.Age, Name:cat.Name);
}


fn PathDistance(path:Vector<Point>)-> double
{
	let mut sum = 0.0;
	let mut point = path[0];
	for(i = 1` i < path.Length()` i = i + 1)
	{
		sum = sum + Distance(point,path[i]);
		point = path[i];
	}
	return sum;
}