using "test2";

// Turns a vampire to ash upon death.
script class VampireDeathScript < IEnemy
{
	AshItemId : string;
	
	new(ash : string)
	{
		AshItemId = ash;
	}
	
	on Death(killer : IActor)
	{
		give 1 item AshItemId to killer;
	}
	
}

fn Vampify(vamp : IEnemy)
{
	attach new VampireDeathScript("VampireAsh") to vamp;
}

conversation SimpleConv
{
	
	start
	{
		Say "Hello my name is Bob." as "Bob";
	}
	
	
	let mut introduced = false;
	
	//introduced : bool = false;
	node LocalInfo
	{	
		
		branch Shops
		{
			Prompt = "What shops are there around here?";
			action()
			{
				say "There are a few shops around here. There's shopA where you can get X; shopB, which sells Y; shopC,"
				+ " which sells Z, and Nana's Groceries where you can get produce from the nearby villages." as "Bob";
				say "Do you want to know more about any of them?";
				choice
				{
					"Yes"	-> { set node Shops;}
					"No"	-> { return;		} // This doesn't end the conversation. I can't leave a choice empty...
				}
			}
		}
		
		branch Goodbye // Free Branches can be included in multiple nodes.
		{
			prompt = "Goodbye.";
			action
			{
				if (introduced)
				{
					Say "Bye. It was nice meeting you.";
				}
				else
				{
					Say "Bye.";
				}
				EndConversation;
			}
		}
	}
	
	auto Node BaseNode
	{
		
		start
		{}
		
		branch PCIntroduce
		{
			when = ! introduced;
			Prompt: "My name is Player0.";
			
			
			Action()
			{
				say "It's a pleasure to meet you.";
				//introduced = true;
			}
		}
		
		branch Weather
		{
			Prompt = "How's the weather?";
			Action()
			{
				Say "It's fine.";
			}
		}
		
		branch AskAboutLocalStuff
		{
			prompt = "What can you tell me about the local area?";
			
			action()
			{
				say "I can tell you a lot. What do you want to know?";
				set node LocalInfo;
			}
		}
		
		branch Goodbye // Free Branches can be included in multiple nodes.
		{
			prompt = "Goodbye.";
			action
			{
				if (introduced)
				{
					Say "Bye. It was nice meeting you.";
				}
				else
				{
					Say "Bye.";
				}
				EndConversation;
			}
		} // Placing it at the end makes it the last choice displayed.
	}
	
	
	node Shops
	{
		branch Goodbye // Free Branches can be included in multiple nodes.
		{
			prompt = "Goodbye.";
			action
			{
				if (introduced)
				{
					Say "Bye. It was nice meeting you.";
				}
				else
				{
					Say "Bye.";
				}
				EndConversation;
			}
		}
	}
	
}

script class Talker < IStandardActivator
{
	Name : string;
	mut count : int;
	new(name : string)
	{
		Name = name; count = 0;
	}
	
	on Activate(actor : IActor)
	{
		Talk(actor.GetName(), count);
		count = count + 1;
	}
	
	
	conversation Talk(pcName:string, myNum : int)
	{
		
		start
		{
			Say "Hello my name is " + Name + "." as Name;
		}
		
		
		auto Node BaseNode
		{
			
			start
			{}
			
			branch PCIntroduce
			{
				
				when -> ! introduced;
				
				Action()
				{
					say "It's a pleasure to meet you " + pcName + "." as Name;
					introduced = true;
				}
				Prompt : "My name is " + pcName + ".";
			}
			
			branch Weather
			{
				Prompt = "How's the weather?";
				Action()
				{
					Say "It's fine." as Name;
				}
			}
			
			branch AskAboutLocalStuff
			{
				prompt = "What can you tell me about the local area?";
				
				action()
				{
					say "I can tell you a lot. What do you want to know?" as Name;
					set node LocalInfo;
				}
			}
			
			branch Goodbye // Free Branches can be included in multiple nodes.
			{
				prompt = "Goodbye.";
				action
				{
					if (introduced)
					{
						Say "Bye, " + pcName + ". It was nice meeting you." as Name;
					}
					else
					{
						Say "Bye." as Name;
					}
					EndConversation;
				}
			}
		}
		let mut introduced = false;
		
		node LocalInfo
		{	
			
			branch Shops
			{
				action()
				{
					say "There are a few shops around here. There's shopA where you can get X; shopB, which sells Y; shopC,"
					+ " which sells Z, and Nana's Groceries where you can get produce from the nearby villages." as Name;
					say "Do you want to know more about any of them?";
					choice
					{
						"Yes"	-> { set node Shops;}
						"No"	-> { return;		} // This doesn't end the conversation. I can't leave a choice empty...
					}
				}
				Prompt = "What shops are there around here?";
			}
			
			
			
			branch Goodbye // Free Branches can be included in multiple nodes.
			{
				prompt = "Goodbye.";
				action
				{
					if (introduced)
					{
						Say "Bye, " + pcName + ". It was nice meeting you." as Name;
					}
					else
					{
						Say "Bye." as Name;
					}
					EndConversation;
				}
			}
		}
		
		node Shops
		{
			
			
			
			branch Goodbye // Free Branches can be included in multiple nodes.
			{
				prompt = "Goodbye.";
				action
				{
					if (introduced)
					{
						Say "Bye, " + pcName + ". It was nice meeting you." as Name;
					}
					else
					{
						Say "Bye." as Name;
					}
					EndConversation;
				}
			}
		}
		
	}
}


