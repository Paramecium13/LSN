<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="d:\program files (x86)\microsoft visual studio 14.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="14.0">
 <Namespaces>
  <Namespace Name="LSNr">
   <Messages>
    <Message Id="Nr" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="85" Level="Error">Correct the casing of 'Nr' in namespace name 'LSNr' by changing it to 'NR'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="LSNr.Optimization">
   <Messages>
    <Message Id="Nr" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="85" Level="Error">Correct the casing of 'Nr' in namespace name 'LSNr.Optimization' by changing it to 'NR'.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="L:\Source\Repos\LSN\Test\LSNr.exe">
   <Modules>
    <Module Name="lsnr.exe">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'LSNr.exe' with a strong name key.</Issue>
      </Message>
      <Message Id="Nr" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="85" Level="Error">Correct the casing of 'Nr' in assembly name 'LSNr.exe' by changing it to 'NR'.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'LSNr.exe' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="LSNr">
       <Types>
        <Type Name="BasePreScript" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'BasePreScript' to protected.</Issue>
          </Message>
          <Message Id="PreScript" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'PreScript' in type name 'BasePreScript' exists as a discrete term. If your usage is intended to be single word, case it as 'Prescript'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="src" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="26">In method 'BasePreScript.BasePreScript(string)', correct the spelling of 'src' in parameter name 'src' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExternalFunctions" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'BasePreScript.ExternalFunctions' or change the field to one that is an immutable reference type. If the reference type 'Dictionary&lt;string, Function&gt;' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'BasePreScript.ExternalFunctions' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFunction(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="229">'BasePreScript.GetFunction(string)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="229">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'BasePreScript.GetFunction(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Include(LsnCore.LsnResourceThing,System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="87">Consider changing the type of parameter 'resource' in 'BasePreScript.Include(LsnResourceThing, string)' from 'LsnResourceThing' to its base type 'LsnScriptBase'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="88">In externally visible method 'BasePreScript.Include(LsnResourceThing, string)', validate parameter 'resource' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IncludedFunctions" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'BasePreScript.IncludedFunctions' or change the field to one that is an immutable reference type. If the reference type 'Dictionary&lt;string, Function&gt;' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'BasePreScript.IncludedFunctions' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IncludedGenerics" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'BasePreScript.IncludedGenerics' or change the field to one that is an immutable reference type. If the reference type 'IList&lt;GenericType&gt;' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'BasePreScript.IncludedGenerics' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IncludedTypes" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'BasePreScript.IncludedTypes' or change the field to one that is an immutable reference type. If the reference type 'IList&lt;LsnType&gt;' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'BasePreScript.IncludedTypes' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IncludeFunction(LsnCore.Function)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="251">In method 'BasePreScript.IncludeFunction(Function)', correct the spelling of 'fn' in parameter name 'fn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="252">In externally visible method 'BasePreScript.IncludeFunction(Function)', validate parameter 'fn' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Includes" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'BasePreScript.Includes' or change the field to one that is an immutable reference type. If the reference type 'List&lt;string&gt;' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'BasePreScript.Includes' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'BasePreScript.Includes' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LazyIncludeFunction(LsnCore.Function)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="260">In method 'BasePreScript.LazyIncludeFunction(Function)', correct the spelling of 'fn' in parameter name 'fn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="260">The 'this' parameter (or 'Me' in Visual Basic) of 'BasePreScript.LazyIncludeFunction(Function)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="fn" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="260">Parameter 'fn' of 'BasePreScript.LazyIncludeFunction(Function)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Load(System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="131">'BasePreScript.Load(string)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="116">The 'this' parameter (or 'Me' in Visual Basic) of 'BasePreScript.Load(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadedGenerics" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'BasePreScript.LoadedGenerics' or change the field to one that is an immutable reference type. If the reference type 'IList&lt;GenericType&gt;' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'BasePreScript.LoadedGenerics' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadedTypes" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'BasePreScript.LoadedTypes' or change the field to one that is an immutable reference type. If the reference type 'IList&lt;LsnType&gt;' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'BasePreScript.LoadedTypes' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFunctionParamAndReturnTypes(LsnCore.Function)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="268">Correct the spelling of 'Param' in member name 'BasePreScript.LoadFunctionParamAndReturnTypes(Function)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="269">In externally visible method 'BasePreScript.LoadFunctionParamAndReturnTypes(Function)', validate parameter 'func' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadType(LsnCore.LsnType)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="282">In externally visible method 'BasePreScript.LoadType(LsnType)', validate parameter 'type' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ObjectFileUpToDate(System.String,LsnCore.LsnResourceThing&amp;)" Kind="Method" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="139">Consider a design that does not require that 'res' be an out parameter.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Name="Reassigned" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="161">In externally visible method 'BasePreScript.ObjectFileUpToDate(string, out LsnResourceThing)', validate local variable ''(*res)'', which was reassigned from parameter 'res', before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Source" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'BasePreScript.Source' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Text" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'BasePreScript.Text' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Tokens" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'BasePreScript.Tokens' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Use(LsnCore.LsnResourceThing,System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="180">Consider changing the type of parameter 'resource' in 'BasePreScript.Use(LsnResourceThing, string)' from 'LsnResourceThing' to its base type 'LsnScriptBase'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="183">'BasePreScript.Use(LsnResourceThing, string)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="BasePreScript.cs" Line="181">In externally visible method 'BasePreScript.Use(LsnResourceThing, string)', validate parameter 'resource' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Usings" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'BasePreScript.Usings' or change the field to one that is an immutable reference type. If the reference type 'List&lt;string&gt;' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'BasePreScript.Usings' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'BasePreScript.Usings' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="Usings" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Usings' in member name 'BasePreScript.Usings' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CharStreamTokenizer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Tokenizer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Tokenizer' in type name 'CharStreamTokenizer'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldDifferByMoreThanCase" Category="Microsoft.Naming" CheckId="CA1708" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
           <Issue Name="Member" Certainty="95" Level="Error">Change member names 'TokenType' and 'tokenType' so that they differ by more than case.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#BaseReadChar(System.Char)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="266">'CharStreamTokenizer.BaseReadChar(char)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="276">'CharStreamTokenizer.BaseReadChar(char)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="161">In method 'CharStreamTokenizer.BaseReadChar(char)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CanBeNegativeSign" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CharStreamTokenizer.CanBeNegativeSign' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CommentReadChar(System.Char)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="612">'CharStreamTokenizer.CommentReadChar(char)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="594">In method 'CharStreamTokenizer.CommentReadChar(char)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Pop()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="636">'CharStreamTokenizer.Pop()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="665">'CharStreamTokenizer.Pop()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="638">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'CharStreamTokenizer.Pop()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="639">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'CharStreamTokenizer.Pop()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="629">Replace the call to 'string.operator ==(string, string)' in 'CharStreamTokenizer.Pop()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Push(System.Char)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="617">In method 'CharStreamTokenizer.Push(char)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadChar(System.Char)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="148">In method 'CharStreamTokenizer.ReadChar(char)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#State" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CharStreamTokenizer.State' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StrB" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'CharStreamTokenizer.StrB' or change the field to one that is an immutable reference type. If the reference type 'StringBuilder' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CharStreamTokenizer.StrB' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Str' in member name 'CharStreamTokenizer.StrB' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StrReadChar(System.Char)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="563">'CharStreamTokenizer.StrReadChar(char)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="584">'CharStreamTokenizer.StrReadChar(char)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="503">Correct the spelling of 'Str' in member name 'CharStreamTokenizer.StrReadChar(char)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="503">In method 'CharStreamTokenizer.StrReadChar(char)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SymReadChar(System.Char)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="336">'CharStreamTokenizer.SymReadChar(char)' has a cyclomatic complexity of 29. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="Sym" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="336">Correct the spelling of 'Sym' in member name 'CharStreamTokenizer.SymReadChar(char)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="336">In method 'CharStreamTokenizer.SymReadChar(char)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SymReadInitChar(System.Char)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Sym" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="288">Correct the spelling of 'Sym' in member name 'CharStreamTokenizer.SymReadInitChar(char)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="CharStreamTokenizer.cs" Line="288">In method 'CharStreamTokenizer.SymReadInitChar(char)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#tokenType" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CharStreamTokenizer.tokenType' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UEscStrB" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'CharStreamTokenizer.UEscStrB' or change the field to one that is an immutable reference type. If the reference type 'StringBuilder' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CharStreamTokenizer.UEscStrB' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Str' in member name 'CharStreamTokenizer.UEscStrB' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CharStreamTokenizer+TokenizerState" Kind="Enum" Accessibility="Family" ExternallyVisible="True">
         <Messages>
          <Message Id="Tokenizer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Tokenizer' in type name 'CharStreamTokenizer.TokenizerState'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CommentMultiLine" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MultiLine" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'MultiLine' in member name 'CharStreamTokenizer.TokenizerState.CommentMultiLine' exists as a discrete term. If your usage is intended to be single word, case it as 'Multiline' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Multi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multi' in member name 'CharStreamTokenizer.TokenizerState.CommentMultiLine' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CommentMultiLineStar" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MultiLine" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'MultiLine' in member name 'CharStreamTokenizer.TokenizerState.CommentMultiLineStar' exists as a discrete term. If your usage is intended to be single word, case it as 'Multiline' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Multi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multi' in member name 'CharStreamTokenizer.TokenizerState.CommentMultiLineStar' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SybolAt" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Sybol" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Sybol' in member name 'CharStreamTokenizer.TokenizerState.SybolAt' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Config" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ObjectFileExtension" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Config.ObjectFileExtension' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Create" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#ControlStructure(System.Collections.Generic.List`1&lt;Tokens.IToken&gt;,System.Collections.Generic.List`1&lt;Tokens.IToken&gt;,LSNr.IPreScript)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Create.cs" Line="28">'Create.ControlStructure(List&lt;IToken&gt;, List&lt;IToken&gt;, IPreScript)' has a cyclomatic complexity of 29. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Create.cs" Line="82">'Create.ControlStructure(List&lt;IToken&gt;, List&lt;IToken&gt;, IPreScript)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Create.cs" Line="84">'Create.ControlStructure(List&lt;IToken&gt;, List&lt;IToken&gt;, IPreScript)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Create.cs" Line="86">'Create.ControlStructure(List&lt;IToken&gt;, List&lt;IToken&gt;, IPreScript)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Create.cs" Line="90">'Create.ControlStructure(List&lt;IToken&gt;, List&lt;IToken&gt;, IPreScript)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Create.cs" Line="135">'Create.ControlStructure(List&lt;IToken&gt;, List&lt;IToken&gt;, IPreScript)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Create.cs" Line="141">'Create.ControlStructure(List&lt;IToken&gt;, List&lt;IToken&gt;, IPreScript)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="tew" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Create.cs" Line="82">Correct the spelling of the unrecognized token 'tew' in the literal '"Incorrect for loop head thing [incorrectness inferred by too tew tokens]."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateGet(System.Collections.Generic.List`1&lt;Tokens.IToken&gt;,LSNr.IPreScript)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="script" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Create.cs" Line="233">Parameter 'script' of 'Create.CreateGet(List&lt;IToken&gt;, IPreScript)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="tokens" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Create.cs" Line="233">Parameter 'tokens' of 'Create.CreateGet(List&lt;IToken&gt;, IPreScript)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetExpression(System.Collections.Generic.IEnumerable`1&lt;Tokens.IToken&gt;,System.String,System.Int32&amp;,LSNr.IPreScript)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Create_Statements.cs" Line="154">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Create.GetExpression(IEnumerable&lt;IToken&gt;, string, out int, IPreScript)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Reassignment(System.Collections.Generic.List`1&lt;Tokens.IToken&gt;,LSNr.IPreScript)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Create_Statements.cs" Line="93">Method 'Create.Reassignment(List&lt;IToken&gt;, IPreScript)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Cannot assign a value of type ,  to a variable (, ) of type , .".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Create_Statements.cs" Line="78">Method 'Create.Reassignment(List&lt;IToken&gt;, IPreScript)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "The variable ,  does not exist at this point.".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Create_Statements.cs" Line="86">Method 'Create.Reassignment(List&lt;IToken&gt;, IPreScript)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "The variable ,  is immutable.".</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Create_Statements.cs" Line="78">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Create.Reassignment(List&lt;IToken&gt;, IPreScript)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Create_Statements.cs" Line="86">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Create.Reassignment(List&lt;IToken&gt;, IPreScript)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Create_Statements.cs" Line="93">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'Create.Reassignment(List&lt;IToken&gt;, IPreScript)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#State(System.Collections.Generic.List`1&lt;Tokens.IToken&gt;,LSNr.IPreScript)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Create_Statements.cs" Line="44">'Create.State(List&lt;IToken&gt;, IPreScript)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Create_Statements.cs" Line="28">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Create.State(List&lt;IToken&gt;, IPreScript)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExpressionBuilder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Build(System.Collections.Generic.List`1&lt;Tokens.IToken&gt;,LSNr.IPreScript)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="525">Change 'List&lt;IToken&gt;' in 'ExpressionBuilder.Build(List&lt;IToken&gt;, IPreScript)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parse()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="63">'ExpressionBuilder.Parse()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseAddSubtract()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="454">'ExpressionBuilder.ParseAddSubtract()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="454">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ExpressionBuilder.ParseAddSubtract()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseComparisons()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="491">'ExpressionBuilder.ParseComparisons()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="491">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ExpressionBuilder.ParseComparisons()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseExponents()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="421">'ExpressionBuilder.ParseExponents()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="421">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExpressionBuilder.ParseExponents()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseInexers()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="349">'ExpressionBuilder.ParseInexers()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="351">'ExpressionBuilder.ParseInexers()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="349">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExpressionBuilder.ParseInexers()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="351">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExpressionBuilder.ParseInexers()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseMultDivMod()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="392">'ExpressionBuilder.ParseMultDivMod()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="392">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ExpressionBuilder.ParseMultDivMod()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseVariablesAndFunctions()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Method" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="74">'ExpressionBuilder.ParseVariablesAndFunctions()' is coupled with 34 different types from 10 different namespaces. Rewrite or refactor the method to decrease its class coupling, or consider moving the method to one of the other types it is tightly coupled with. A class coupling above 40 indicates poor maintainability, a class coupling between 40 and 30 indicates moderate maintainability, and a class coupling below 30 indicates good maintainability.</Issue>
            </Message>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="74">'ExpressionBuilder.ParseVariablesAndFunctions()' has a cyclomatic complexity of 40. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="AvoidExcessiveLocals" Category="Microsoft.Performance" CheckId="CA1809" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="Compiler" Certainty="95" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="74">'ExpressionBuilder.ParseVariablesAndFunctions()' has 84 local variables, 39 of which were generated by the compiler. Refactor 'ExpressionBuilder.ParseVariablesAndFunctions()' so that it uses fewer than 64 local variables.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="82">'ExpressionBuilder.ParseVariablesAndFunctions()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="84">'ExpressionBuilder.ParseVariablesAndFunctions()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="98">'ExpressionBuilder.ParseVariablesAndFunctions()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="156">'ExpressionBuilder.ParseVariablesAndFunctions()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="161">'ExpressionBuilder.ParseVariablesAndFunctions()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="190">'ExpressionBuilder.ParseVariablesAndFunctions()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="208">'ExpressionBuilder.ParseVariablesAndFunctions()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="234">'ExpressionBuilder.ParseVariablesAndFunctions()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="239">'ExpressionBuilder.ParseVariablesAndFunctions()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="246">'ExpressionBuilder.ParseVariablesAndFunctions()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="248">'ExpressionBuilder.ParseVariablesAndFunctions()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="256">'ExpressionBuilder.ParseVariablesAndFunctions()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="expresion" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="84">Correct the spelling of the unrecognized token 'expresion' in the literal '"An expresion cannot end with \'.\'."'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="234">Correct the spelling of the unrecognized token 'expresion' in the literal '"An expresion cannot end with \'new\'."'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="82">Correct the spelling of the unrecognized token 'expresion' in the literal '"An expresion cannot start with \'.\'."'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="239">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExpressionBuilder.ParseVariablesAndFunctions()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="246">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExpressionBuilder.ParseVariablesAndFunctions()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="156">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExpressionBuilder.ParseVariablesAndFunctions()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ExpressionBuilder.cs" Line="161">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExpressionBuilder.ParseVariablesAndFunctions()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Extensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#HasToken(System.Collections.Generic.IEnumerable`1&lt;Tokens.IToken&gt;,System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Extensions.cs" Line="22">Replace method 'Extensions.HasToken(this IEnumerable&lt;IToken&gt;, string, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IndexOf(System.Collections.Generic.List`1&lt;Tokens.IToken&gt;,System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Extensions.cs" Line="34">Replace method 'Extensions.IndexOf(this List&lt;IToken&gt;, string, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Extensions.cs" Line="34">Change 'List&lt;IToken&gt;' in 'Extensions.IndexOf(this List&lt;IToken&gt;, string, bool)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Extensions.cs" Line="39">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Extensions.IndexOf(this List&lt;IToken&gt;, string, bool)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Extensions.cs" Line="37">In externally visible method 'Extensions.IndexOf(this List&lt;IToken&gt;, string, bool)', validate parameter 'self' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToDictionary`2(System.Collections.Generic.IList`1&lt;System.Tuple`2&lt;!!0,!!1&gt;&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ls" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="Extensions.cs" Line="52">In method 'Extensions.ToDictionary&lt;TKey, TValue&gt;(this IList&lt;Tuple&lt;TKey, TValue&gt;&gt;)', correct the spelling of 'ls' in parameter name 'ls' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IPreScript" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="PreScript" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'PreScript' in type name 'IPreScript' exists as a discrete term. If your usage is intended to be single word, case it as 'Prescript'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IScope" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateVariable(LsnCore.Parameter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'IScope.CreateVariable(Parameter)', correct the spelling of 'param' in parameter name 'param' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateVariable(System.String,System.Boolean,LsnCore.Expressions.IExpression)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="mutable" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error">In virtual/interface member 'IScope.CreateVariable(string, bool, IExpression)', rename parameter 'mutable' so that it no longer conflicts with the reserved language keyword 'mutable'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Pop(System.Collections.Generic.List`1&lt;LsnCore.Component&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;Component&gt;' in 'IScope.Pop(List&lt;Component&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ITypeContainer" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetType(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="GetType" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'ITypeContainer.GetType(string)' so that it no longer conflicts with the reserved language keyword 'GetType'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Parser" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Consolidate(System.Collections.Generic.List`1&lt;LsnCore.Component&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Parser.cs" Line="83">Change 'List&lt;Component&gt;' in 'Parser.Consolidate(List&lt;Component&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Parser.cs" Line="83">Change 'List&lt;Component&gt;' in 'Parser.Consolidate(List&lt;Component&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Parser.cs" Line="85">In externally visible method 'Parser.Consolidate(List&lt;Component&gt;)', validate parameter 'components' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Preprocessor" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Mutable" Kind="Field" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'Preprocessor.Mutable' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PreResource" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="src" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="20">In method 'PreResource.PreResource(string)', correct the spelling of 'src' in parameter name 'src' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GenericTypes" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'PreResource.GenericTypes' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetResource()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="433">Change 'PreResource.GetResource()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InlineLiterals" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'PreResource.InlineLiterals' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MakeRecord(System.String,System.Collections.Generic.List`1&lt;Tokens.IToken&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="421">Method 'PreResource.MakeRecord(string, List&lt;IToken&gt;)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Error in parsing struct , .".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="419">Modify 'PreResource.MakeRecord(string, List&lt;IToken&gt;)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="421">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.MakeRecord(string, List&lt;IToken&gt;)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MakeStruct(System.String,System.Collections.Generic.List`1&lt;Tokens.IToken&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="397">Method 'PreResource.MakeStruct(string, List&lt;IToken&gt;)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Error in parsing struct , .".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="395">Modify 'PreResource.MakeStruct(string, List&lt;IToken&gt;)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="397">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.MakeStruct(string, List&lt;IToken&gt;)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseFields(System.String,System.String,System.Collections.Generic.List`1&lt;Tokens.IToken&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="355">Method 'PreResource.ParseFields(string, string, List&lt;IToken&gt;)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Error in ,  , : unexpected end of declaration, expected \':\'.".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="367">Method 'PreResource.ParseFields(string, string, List&lt;IToken&gt;)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Error in ,  , : unexpected end of declaration, expected type.".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="361">Method 'PreResource.ParseFields(string, string, List&lt;IToken&gt;)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Error in ,  , : unexpected token , , expected \':\'".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="344">Method 'PreResource.ParseFields(string, string, List&lt;IToken&gt;)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Error, invalid ,  , .".</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="344">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.ParseFields(string, string, List&lt;IToken&gt;)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="355">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.ParseFields(string, string, List&lt;IToken&gt;)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="367">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.ParseFields(string, string, List&lt;IToken&gt;)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="361">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.ParseFields(string, string, List&lt;IToken&gt;)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseParameters(System.Collections.Generic.List`1&lt;Tokens.IToken&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="290">'PreResource.ParseParameters(List&lt;IToken&gt;)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="298">'PreResource.ParseParameters(List&lt;IToken&gt;)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="311">'PreResource.ParseParameters(List&lt;IToken&gt;)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="319">'PreResource.ParseParameters(List&lt;IToken&gt;)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="324">'PreResource.ParseParameters(List&lt;IToken&gt;)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="328">'PreResource.ParseParameters(List&lt;IToken&gt;)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="recieved" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="290">Correct the spelling of the unrecognized token 'recieved' in the literal '" recieved token \'"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="328">Correct the spelling of the unrecognized token 'recieved' in the literal '", recieved \'"'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="324">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.ParseParameters(List&lt;IToken&gt;)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="290">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.ParseParameters(List&lt;IToken&gt;)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="298">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.ParseParameters(List&lt;IToken&gt;)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="311">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.ParseParameters(List&lt;IToken&gt;)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="319">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.ParseParameters(List&lt;IToken&gt;)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="328">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.ParseParameters(List&lt;IToken&gt;)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseStructsAndRecords()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="145">Method 'PreResource.ParseStructsAndRecords()' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Error in parsing record , : invalid token: , , expected {.".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="131">Method 'PreResource.ParseStructsAndRecords()' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Error in parsing struct , : invalid token: , , expected {.".</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="131">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.ParseStructsAndRecords()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="145">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.ParseStructsAndRecords()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PreParseFunctions(System.Collections.Generic.List`1&lt;Tokens.IToken&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="174">Method 'PreResource.PreParseFunctions(List&lt;IToken&gt;)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Error in parsing function ,  expected token \'(\', recieved \', \'.".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="199">Method 'PreResource.PreParseFunctions(List&lt;IToken&gt;)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Error in parsing function ,  expected token \'(\', recieved \', \'.".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="219">Method 'PreResource.PreParseFunctions(List&lt;IToken&gt;)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Error in parsing function ,  expected token \'{\', recieved \', \'.".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="211">Method 'PreResource.PreParseFunctions(List&lt;IToken&gt;)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Error in parsing return type of function , .".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="209">Modify 'PreResource.PreParseFunctions(List&lt;IToken&gt;)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="recieved" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="174">Correct the spelling of the unrecognized token 'recieved' in the literal '" expected token \'(\', recieved \'"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="199">Correct the spelling of the unrecognized token 'recieved' in the literal '" expected token \'(\', recieved \'"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="219">Correct the spelling of the unrecognized token 'recieved' in the literal '" expected token \'{\', recieved \'"'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="211">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.PreParseFunctions(List&lt;IToken&gt;)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="174">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.PreParseFunctions(List&lt;IToken&gt;)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="199">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.PreParseFunctions(List&lt;IToken&gt;)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="PreResource.cs" Line="219">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'PreResource.PreParseFunctions(List&lt;IToken&gt;)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Strings" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'PreResource.Strings' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PreScript" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="PreScript" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'PreScript' in type name 'PreScript' exists as a discrete term. If your usage is intended to be single word, case it as 'Prescript'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="src" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="PreScript.cs" Line="24">In method 'PreScript.PreScript(string)', correct the spelling of 'src' in parameter name 'src' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetScript()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreScript.cs" Line="56">Change 'PreScript.GetScript()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InlineLiterals" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'PreScript.InlineLiterals' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessDirectives(System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="PreScript.cs" Line="76">In externally visible method 'PreScript.ProcessDirectives(string)', validate parameter 'source' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Strings" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'PreScript.Strings' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Program" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Build(System.String[])" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="args" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Program.cs" Line="159">Parameter 'args' of 'Program.Build(string[])' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetObjectPath(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Program.cs" Line="167">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'Program.GetObjectPath(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Program.cs" Line="173">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'Program.GetObjectPath(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Main(System.String[])" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Program.cs" Line="41">In method 'Program.Main(string[])', call System.IDisposable.Dispose on object 'new StringReader(File.ReadAllText("lsn.config"))' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Program.cs" Line="54">Method 'Program.Main(string[])' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "The file ,  could not be found.".</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Program.cs" Line="34">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Program.Main(string[])' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Program.cs" Line="48">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Program.Main(string[])' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Program.cs" Line="54">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Program.Main(string[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MakeResource(System.String,System.String,LsnCore.LsnResourceThing&amp;,System.String[])" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Program.cs" Line="119">Method 'Program.MakeResource(string, string, out LsnResourceThing, string[])' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Invalid source.".</Issue>
            </Message>
            <Message Id="args" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Program.cs" Line="113">Parameter 'args' of 'Program.MakeResource(string, string, out LsnResourceThing, string[])' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MakeScript(System.String,System.String,System.String[])" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Program.cs" Line="98">Method 'Program.MakeScript(string, string, string[])' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Invalid source.".</Issue>
            </Message>
            <Message Id="args" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Program.cs" Line="93">Parameter 'args' of 'Program.MakeScript(string, string, string[])' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetUp()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Program.cs" Line="137">In method 'Program.SetUp()', object 'File.Create("lsn.config")' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'File.Create("lsn.config")' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Scope" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Pop(System.Collections.Generic.List`1&lt;LsnCore.Component&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Scope.cs" Line="68">Change 'List&lt;Component&gt;' in 'Scope.Pop(List&lt;Component&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Scope.cs" Line="72">In externally visible method 'Scope.Pop(List&lt;Component&gt;)', validate parameter 'components' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TokenFactory" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetToken(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="TokenFactory.cs" Line="89">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'TokenFactory.GetToken(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="TokenFactory.cs" Line="90">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'TokenFactory.GetToken(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Tokenizer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Tokenizer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Tokenizer' in type name 'Tokenizer'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ProcessOperators(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Tokenizer.cs" Line="89">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Tokenizer.ProcessOperators(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessStrings(System.String,System.Collections.Generic.Dictionary`2&lt;System.String,System.String&gt;&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Tokenizer.cs" Line="53">Consider a design that does not require that 'strings' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Tokenize(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="Tokenizer.cs" Line="61">Change 'List&lt;IToken&gt;' in 'Tokenizer.Tokenize(string)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TypeContainerExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ParseType(LSNr.ITypeContainer,System.Collections.Generic.List`1&lt;Tokens.IToken&gt;,System.Int32,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="ITypeContainer.cs" Line="30">Consider a design that does not require that 'endIndex' be an out parameter.</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="ITypeContainer.cs" Line="42">Method 'TypeContainerExtensions.ParseType(this ITypeContainer, List&lt;IToken&gt;, int, out int)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Error: expected token \'&lt;\', recieved \', \'.".</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ITypeContainer.cs" Line="30">Change 'List&lt;IToken&gt;' in 'TypeContainerExtensions.ParseType(this ITypeContainer, List&lt;IToken&gt;, int, out int)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="recieved" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="ITypeContainer.cs" Line="42">Correct the spelling of the unrecognized token 'recieved' in the literal '"Error: expected token \'&lt;\', recieved \'"'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="ITypeContainer.cs" Line="42">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TypeContainerExtensions.ParseType(this ITypeContainer, List&lt;IToken&gt;, int, out int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="ITypeContainer.cs" Line="33">In externally visible method 'TypeContainerExtensions.ParseType(this ITypeContainer, List&lt;IToken&gt;, int, out int)', validate parameter 'self' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="ITypeContainer.cs" Line="32">In externally visible method 'TypeContainerExtensions.ParseType(this ITypeContainer, List&lt;IToken&gt;, int, out int)', validate parameter 'tokens' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Variable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(LsnCore.Parameter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="Variable.cs" Line="24">In method 'Variable.Variable(Parameter)', correct the spelling of 'param' in parameter name 'param' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'Variable.Variable(Parameter)', validate parameter 'param' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Boolean,LsnCore.Expressions.IExpression)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="Variable.cs" Line="24">In method 'Variable.Variable(string, bool, IExpression)', consider providing a more meaningful name than parameter name 'm'.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Variable.cs" Line="55">In externally visible method 'Variable.Variable(string, bool, IExpression)', validate parameter 'init' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Boolean,LsnCore.Expressions.IExpression,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="Variable.cs" Line="24">In method 'Variable.Variable(string, bool, IExpression, int)', consider providing a more meaningful name than parameter name 'm'.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Variable.cs" Line="69">In externally visible method 'Variable.Variable(string, bool, IExpression, int)', validate parameter 'init' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddReasignment(LsnCore.Statements.ReassignmentStatement)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Reasignment" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="Variable.cs" Line="107">Correct the spelling of 'Reasignment' in member name 'Variable.AddReasignment(ReassignmentStatement)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Variable.cs" Line="109">In externally visible method 'Variable.AddReasignment(ReassignmentStatement)', validate parameter 'reassign' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAccessExpression()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="Variable.cs" Line="114">Change 'Variable.GetAccessExpression()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Index" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Variable.Index' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Mutable" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Variable.Mutable' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Name" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Variable.Name' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Replace(LsnCore.Expressions.IExpression)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Expr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="Variable.cs" Line="118">In method 'Variable.Replace(IExpression)', correct the spelling of 'Expr' in parameter name 'newExpr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Type" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'Variable.Type' or change the field to one that is an immutable reference type. If the reference type 'LsnType' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Variable.Type' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Users" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="L:\Source\Repos\LSN\LSNr" File="Variable.cs" Line="43">Consider a design where 'Variable.Users' doesn't nest generic type 'IReadOnlyList&lt;Tuple&lt;IExpressionContainer, int&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="VariableTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(LSNr.VariableTable,System.Collections.Generic.IList`1&lt;LSNr.Variable&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="VariableTable.cs" Line="68">In externally visible method 'VariableTable.VariableTable(VariableTable, IList&lt;Variable&gt;)', validate parameter 'parent' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_MaxSizeFromChildren" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'VariableTable._MaxSizeFromChildren' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParentVariableAdded(System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="VariableTable.cs" Line="194">'VariableTable.ParentVariableAdded(int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="VariableTable.cs" Line="194">The 'this' parameter (or 'Me' in Visual Basic) of 'VariableTable.ParentVariableAdded(int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="index" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="VariableTable.cs" Line="194">Parameter 'index' of 'VariableTable.ParentVariableAdded(int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Pop(System.Collections.Generic.List`1&lt;LsnCore.Component&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr" File="VariableTable.cs" Line="113">Change 'List&lt;Component&gt;' in 'VariableTable.Pop(List&lt;Component&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="VariableTable.cs" Line="121">In externally visible method 'VariableTable.Pop(List&lt;Component&gt;)', validate parameter 'components' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="LSNr.Optimization">
       <Types>
        <Type Name="ArithmeticIdentityChecker" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CheckAdditive(LsnCore.Expressions.BinaryExpression)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ArithmeticIdentityChecker.cs" Line="65">Replace the call to 'string.operator ==(string, string)' in 'ArithmeticIdentityChecker.CheckAdditive(BinaryExpression)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ArithmeticIdentityChecker.cs" Line="80">Replace the call to 'string.operator ==(string, string)' in 'ArithmeticIdentityChecker.CheckAdditive(BinaryExpression)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckDiff(LsnCore.Expressions.BinaryExpression)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ArithmeticIdentityChecker.cs" Line="88">'ArithmeticIdentityChecker.CheckDiff(BinaryExpression)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckDiv(LsnCore.Expressions.BinaryExpression)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ArithmeticIdentityChecker.cs" Line="169">Replace the call to 'string.operator ==(string, string)' in 'ArithmeticIdentityChecker.CheckDiv(BinaryExpression)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ArithmeticIdentityChecker.cs" Line="186">Replace the call to 'string.operator ==(string, string)' in 'ArithmeticIdentityChecker.CheckDiv(BinaryExpression)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkBinExp(LsnCore.Expressions.BinaryExpression)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ArithmeticIdentityChecker.cs" Line="19">In member 'ArithmeticIdentityChecker.WalkBinExp(BinaryExpression)', change parameter name 'bin' to 'e' in order to match the identifier as it has been declared in 'ExpressionWalker.WalkBinExp(BinaryExpression)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ComponentWalker" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#View(LsnCore.ControlStructures.CaseStructure)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="83">In method 'ComponentWalker.View(CaseStructure)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#View(LsnCore.ControlStructures.Choice)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="92">In method 'ComponentWalker.View(Choice)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#View(LsnCore.ControlStructures.ChoicesBlockControl)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="104">In method 'ComponentWalker.View(ChoicesBlockControl)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#View(LsnCore.ControlStructures.ElsifControl)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="139">In method 'ComponentWalker.View(ElsifControl)', consider providing a more meaningful name than parameter name 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#View(LsnCore.ControlStructures.ForLoop)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="f" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="114">In method 'ComponentWalker.View(ForLoop)', consider providing a more meaningful name than parameter name 'f'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#View(LsnCore.ControlStructures.IfElseControl)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="f" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="129">In method 'ComponentWalker.View(IfElseControl)', consider providing a more meaningful name than parameter name 'f'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#View(LsnCore.ControlStructures.MatchStructure)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="150">In method 'ComponentWalker.View(MatchStructure)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#View(LsnCore.ControlStructures.WhileLoop)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="wl" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="160">In method 'ComponentWalker.View(WhileLoop)', correct the spelling of 'wl' in parameter name 'wl' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#View(LsnCore.Statements.Statement)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="164">In method 'ComponentWalker.View(Statement)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Walk(LsnCore.Component)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="16">In method 'ComponentWalker.Walk(Component)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Walk(System.Collections.Generic.IList`1&lt;LsnCore.Component&gt;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="25">In externally visible method 'ComponentWalker.Walk(IList&lt;Component&gt;)', validate parameter 'components' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkCaseStructure(LsnCore.ControlStructures.CaseStructure)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="78">In method 'ComponentWalker.WalkCaseStructure(CaseStructure)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkCbc(LsnCore.ControlStructures.ChoicesBlockControl)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Cbc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="96">Correct the spelling of 'Cbc' in member name 'ComponentWalker.WalkCbc(ChoicesBlockControl)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="96">In method 'ComponentWalker.WalkCbc(ChoicesBlockControl)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="98">In externally visible method 'ComponentWalker.WalkCbc(ChoicesBlockControl)', validate parameter 'c' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkChioce(LsnCore.ControlStructures.Choice)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Chioce" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="87">Correct the spelling of 'Chioce' in member name 'ComponentWalker.WalkChioce(Choice)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="87">In method 'ComponentWalker.WalkChioce(Choice)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="88">In externally visible method 'ComponentWalker.WalkChioce(Choice)', validate parameter 'c' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkElsif(LsnCore.ControlStructures.ElsifControl)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Elsif" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="133">Correct the spelling of 'Elsif' in member name 'ComponentWalker.WalkElsif(ElsifControl)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="133">In method 'ComponentWalker.WalkElsif(ElsifControl)', consider providing a more meaningful name than parameter name 'e'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="135">In externally visible method 'ComponentWalker.WalkElsif(ElsifControl)', validate parameter 'e' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkForLoop(LsnCore.ControlStructures.ForLoop)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="f" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="108">In method 'ComponentWalker.WalkForLoop(ForLoop)', consider providing a more meaningful name than parameter name 'f'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="110">In externally visible method 'ComponentWalker.WalkForLoop(ForLoop)', validate parameter 'f' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkIfElse(LsnCore.ControlStructures.IfElseControl)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="f" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="118">In method 'ComponentWalker.WalkIfElse(IfElseControl)', consider providing a more meaningful name than parameter name 'f'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="120">In externally visible method 'ComponentWalker.WalkIfElse(IfElseControl)', validate parameter 'f' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkMatchStructure(LsnCore.ControlStructures.MatchStructure)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="ms" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="143">In method 'ComponentWalker.WalkMatchStructure(MatchStructure)', correct the spelling of 'ms' in parameter name 'ms' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="145">In externally visible method 'ComponentWalker.WalkMatchStructure(MatchStructure)', validate parameter 'ms' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkWhileLoop(LsnCore.ControlStructures.WhileLoop)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="wl" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="154">In method 'ComponentWalker.WalkWhileLoop(WhileLoop)', correct the spelling of 'wl' in parameter name 'wl' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ComponentWalker.cs" Line="156">In externally visible method 'ComponentWalker.WalkWhileLoop(WhileLoop)', validate parameter 'wl' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExpressionWalker" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#View(LsnCore.Expressions.BinaryExpression)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="97">In method 'ExpressionWalker.View(BinaryExpression)', consider providing a more meaningful name than parameter name 'b'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#View(LsnCore.Expressions.VariableExpression)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="v" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="163">In method 'ExpressionWalker.View(VariableExpression)', consider providing a more meaningful name than parameter name 'v'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Walk(LsnCore.Expressions.IExpression)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="17">In method 'ExpressionWalker.Walk(IExpression)', consider providing a more meaningful name than parameter name 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkBinExp(LsnCore.Expressions.BinaryExpression)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Exp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="85">Correct the spelling of 'Exp' in member name 'ExpressionWalker.WalkBinExp(BinaryExpression)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="85">In method 'ExpressionWalker.WalkBinExp(BinaryExpression)', consider providing a more meaningful name than parameter name 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkCvaExp(LsnCore.Expressions.CollectionValueAccessExpression)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Cva" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="101">Correct the spelling of 'Cva' in member name 'ExpressionWalker.WalkCvaExp(CollectionValueAccessExpression)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Exp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="101">Correct the spelling of 'Exp' in member name 'ExpressionWalker.WalkCvaExp(CollectionValueAccessExpression)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="101">In method 'ExpressionWalker.WalkCvaExp(CollectionValueAccessExpression)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="102">In externally visible method 'ExpressionWalker.WalkCvaExp(CollectionValueAccessExpression)', validate parameter 'c' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkFieldAccess(LsnCore.Expressions.FieldAccessExpression)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="f" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="108">In method 'ExpressionWalker.WalkFieldAccess(FieldAccessExpression)', consider providing a more meaningful name than parameter name 'f'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="109">In externally visible method 'ExpressionWalker.WalkFieldAccess(FieldAccessExpression)', validate parameter 'f' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkFuncCall(LsnCore.Expressions.FunctionCall)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="f" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="117">In method 'ExpressionWalker.WalkFuncCall(FunctionCall)', consider providing a more meaningful name than parameter name 'f'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="118">In externally visible method 'ExpressionWalker.WalkFuncCall(FunctionCall)', validate parameter 'f' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkGet(LsnCore.Expressions.GetExpression)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="124">In method 'ExpressionWalker.WalkGet(GetExpression)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkMethodCall(LsnCore.Expressions.MethodCall)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="130">In method 'ExpressionWalker.WalkMethodCall(MethodCall)', consider providing a more meaningful name than parameter name 'm'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="131">In externally visible method 'ExpressionWalker.WalkMethodCall(MethodCall)', validate parameter 'm' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkOrExp(LsnCore.Expressions.OrExpression)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Exp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="137">Correct the spelling of 'Exp' in member name 'ExpressionWalker.WalkOrExp(OrExpression)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="or" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="137">In virtual/interface member 'ExpressionWalker.WalkOrExp(OrExpression)', rename parameter 'or' so that it no longer conflicts with the reserved language keyword 'or'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="138">In externally visible method 'ExpressionWalker.WalkOrExp(OrExpression)', validate parameter 'or' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkRecordConstructor(LsnCore.Expressions.RecordConstructor)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="rc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="145">In method 'ExpressionWalker.WalkRecordConstructor(RecordConstructor)', correct the spelling of 'rc' in parameter name 'rc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="146">In externally visible method 'ExpressionWalker.WalkRecordConstructor(RecordConstructor)', validate parameter 'rc' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WalkStructConstuctor(LsnCore.Expressions.StructConstructor)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Constuctor" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="153">Correct the spelling of 'Constuctor' in member name 'ExpressionWalker.WalkStructConstuctor(StructConstructor)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="sc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="153">In method 'ExpressionWalker.WalkStructConstuctor(StructConstructor)', correct the spelling of 'sc' in parameter name 'sc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Optimization" File="ExpressionWalker.cs" Line="154">In externally visible method 'ExpressionWalker.WalkStructConstuctor(StructConstructor)', validate parameter 'sc' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Tokens">
       <Types>
        <Type Name="TokenExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Equals(Tokens.IToken,Tokens.IToken)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="IToken.cs" Line="19">In method 'TokenExtensions.Equals(IToken, IToken)', consider providing a more meaningful name than parameter name 'a'.</Issue>
            </Message>
            <Message Id="b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr" File="IToken.cs" Line="19">In method 'TokenExtensions.Equals(IToken, IToken)', consider providing a more meaningful name than parameter name 'b'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="IToken.cs" Line="22">In externally visible method 'TokenExtensions.Equals(IToken, IToken)', validate parameter 'a' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr" File="IToken.cs" Line="22">In externally visible method 'TokenExtensions.Equals(IToken, IToken)', validate parameter 'b' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Tokens.Tokens">
       <Types>
        <Type Name="Ambiguous" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'Ambiguous' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'Ambiguous' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="Ambiguous.cs" Line="15">Replace method 'Ambiguous.Ambiguous(string, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="Ambiguous.cs" Line="15">In method 'Ambiguous.Ambiguous(string, int)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Equals(Tokens.IToken)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="Ambiguous.cs" Line="21">In externally visible method 'Ambiguous.Equals(IToken)', validate parameter 'other' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Assignment" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'Assignment' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'Assignment' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="Assignment.cs" Line="15">Replace method 'Assignment.Assignment(string, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="Assignment.cs" Line="15">In method 'Assignment.Assignment(string, int)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FloatToken" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'FloatToken' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'FloatToken' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Double,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="FloatToken.cs" Line="22">Replace method 'FloatToken.FloatToken(double, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="FloatToken.cs" Line="22">In method 'FloatToken.FloatToken(double, int)', consider providing a more meaningful name than parameter name 'd'.</Issue>
            </Message>
            <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="FloatToken.cs" Line="23">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'FloatToken.FloatToken(double, int)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="FloatToken.cs" Line="16">Replace method 'FloatToken.FloatToken(string, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="FloatToken.cs" Line="16">In method 'FloatToken.FloatToken(string, int)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="System.Double.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="FloatToken.cs" Line="18">Because the behavior of 'double.Parse(string)' could vary based on the current user's locale settings, replace this call in 'FloatToken.FloatToken(string, int)' with a call to 'double.Parse(string, IFormatProvider)'. If the result of 'double.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DVal" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'FloatToken.DVal' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Val' in member name 'FloatToken.DVal' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Identifier" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'Identifier' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'Identifier' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="Identifier.cs" Line="15">Replace method 'Identifier.Identifier(string, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="Identifier.cs" Line="15">In method 'Identifier.Identifier(string, int)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IntToken" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'IntToken' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'IntToken' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="IntToken.cs" Line="22">Replace method 'IntToken.IntToken(int, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="IntToken.cs" Line="22">In method 'IntToken.IntToken(int, int)', consider providing a more meaningful name than parameter name 'i'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="IntToken.cs" Line="23">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'IntToken.IntToken(int, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="IntToken.cs" Line="16">Replace method 'IntToken.IntToken(string, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="IntToken.cs" Line="16">In method 'IntToken.IntToken(string, int)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="IntToken.cs" Line="18">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'IntToken.IntToken(string, int)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IVal" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'IntToken.IVal' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Val' in member name 'IntToken.IVal' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Keyword" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'Keyword' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'Keyword' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="Keyword.cs" Line="15">Replace method 'Keyword.Keyword(string, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="Keyword.cs" Line="15">In method 'Keyword.Keyword(string, int)', consider providing a more meaningful name than parameter name 't'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Operator" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Operator" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Rename type 'Operator' so that it no longer conflicts with the reserved language keyword 'Operator'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'Operator' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'Operator' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="Operator.cs" Line="15">Replace method 'Operator.Operator(string, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="Operator.cs" Line="15">In method 'Operator.Operator(string, int)', consider providing a more meaningful name than parameter name 't'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringToken" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'StringToken' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'StringToken' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="StringToken.cs" Line="15">Replace method 'StringToken.StringToken(string, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="StringToken.cs" Line="15">In method 'StringToken.StringToken(string, int)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SubToken" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'SubToken' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'SubToken' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="SubToken.cs" Line="15">Replace method 'SubToken.SubToken(string, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SyntaxSymbol" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'SyntaxSymbol' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'SyntaxSymbol' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="SyntaxSymbol.cs" Line="15">Replace method 'SyntaxSymbol.SyntaxSymbol(string, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="SyntaxSymbol.cs" Line="15">In method 'SyntaxSymbol.SyntaxSymbol(string, int)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="line" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2017-02-28 16:11:16Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="L:\Source\Repos\LSN\LSNr\Tokens" File="SyntaxSymbol.cs" Line="15">Parameter 'line' of 'SyntaxSymbol.SyntaxSymbol(string, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012">
   <Name>Abstract types should not have constructors</Name>
   <Description>Public constructors for abstract types do not make sense because you cannot create instances of abstract types.</Description>
   <Resolution Name="Default">Change the accessibility of all public constructors in {0} to protected.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182126.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506">
   <Name>Avoid excessive class coupling</Name>
   <Description>Types and methods with a high degree of class coupling can be difficult to maintain.</Description>
   <Resolution Name="Method">{0} is coupled with {1} different types from {2} different namespaces. Rewrite or refactor the method to decrease its class coupling, or consider moving the method to one of the other types it is tightly coupled with. A class coupling above {3} indicates poor maintainability, a class coupling between {3} and {4} indicates moderate maintainability, and a class coupling below {4} indicates good maintainability.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb397994.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502">
   <Name>Avoid excessive complexity</Name>
   <Description>Method implementations that are exceedingly complex increase the challenge of understanding and maintaining code.</Description>
   <Resolution Name="Default">{0} has a cyclomatic complexity of {1}. Rewrite or refactor the method to reduce complexity to {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182212.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveLocals" Category="Microsoft.Performance" CheckId="CA1809">
   <Name>Avoid excessive locals</Name>
   <Description>Method implementations should not contain more than 64 local variables. In order for the run-time to enregister local variables most efficiently, there should be 64 or fewer of them. Enregistering based on flow analysis will not occur for locals in excess of 64, which may result in slower performance.</Description>
   <Resolution Name="Compiler">{0} has {1} local variables, {2} of which were generated by the compiler. Refactor {0} so that it uses fewer than 64 local variables.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182263.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021">
   <Name>Avoid out parameters</Name>
   <Description>Using out parameters might indicate a design flaw. Although there are legitimate times to use out parameters, their use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be an out parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182131.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
   <Name>Avoid unused private fields</Name>
   <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">It appears that field {0} is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245042.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberShouldBeDiscreteTerm">The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="TypeShouldBeDiscreteTerm">The compound word '{0}' in type name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
   <Name>Consider passing base types as parameters</Name>
   <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
   <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/3hk32yyz.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026">
   <Name>Default parameters should not be used</Name>
   <Description>Some programming languages do not support default parameters. Replace default parameters with method overloads that supply the default argument.</Description>
   <Resolution Name="Default">Replace method {0} with an overload that supplies all default arguments.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182135.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="ExceptionEdge">In method {0}, object {1} is not disposed along all exception paths. Call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104">
   <Name>Do not declare read only mutable reference types</Name>
   <Description>A read-only declaration for a mutable reference type does not prevent the field's instance data from being modified. For example, a read-only StringBuilder field declaration does not make sense, since the data encapsulated by the StringBuilder can be modified using the read-only reference.</Description>
   <Resolution Name="Default">Remove the read-only designation from {0} or change the field to one that is an immutable reference type. If the reference type {1} is, in fact, immutable, exclude this message.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182302.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="25">Error</MessageLevel>
   <File Name="securityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
   <Name>Do not nest generic types in member signatures</Name>
   <Description>Avoid API that require users to instantiate a generic type with another generic type as type argument. The syntax gets too complex.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't nest generic type {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182144.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="TooGeneric">{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182338.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Assembly">Correct the casing of '{0}' in assembly name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="Namespace">Correct the casing of '{0}' in namespace name '{1}' by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldDifferByMoreThanCase" Category="Microsoft.Naming" CheckId="CA1708">
   <Name>Identifiers should differ by more than case</Name>
   <Description>Do not use names that require case sensitivity for uniqueness. Components must be fully usable from both case-sensitive and case-insensitive languages. Since case-insensitive languages cannot distinguish between two names within the same context that differ only by case, components must avoid this situation.</Description>
   <Resolution Name="Member">Change member names {0} and '{1}' so that they differ by more than case.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182242.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
   <Name>Identifiers should not match keywords</Name>
   <Description>Identifiers which conflict with reserved language keywords should be avoided. Using a reserved keyword as an identifier makes it harder for consumers in other languages to use your API.</Description>
   <Resolution Name="Member">Rename virtual/interface member {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   <Resolution Name="MemberParameter">In virtual/interface member {0}, rename parameter {1} so that it no longer conflicts with the reserved language keyword '{2}'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   <Resolution Name="Type">Rename type {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182248.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
   <Name>Override equals and operator equals on value types</Name>
   <Description>The default System.ValueType implementation might not perform as well as a custom implementation.</Description>
   <Resolution Name="Equals">{0} should override Equals.</Resolution>
   <Resolution Name="op_Equality">{0} should override the equality (==) and inequality (!=) operators.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182276.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
   <Name>Parameter names should match base declaration</Name>
   <Description>For usability reasons, parameter names in overridden methods should match those of the base declaration.</Description>
   <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182251.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182189.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386080.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820">
   <Name>Test for empty strings using string length</Name>
   <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
   <Resolution Name="IsNullOrEmpty">Replace the call to {0} in {1} with a call to 'String.IsNullOrEmpty'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182279.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Resolution Name="Reassigned">In externally visible method {0}, validate local variable '{1}', which was reassigned from parameter '{2}', before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
